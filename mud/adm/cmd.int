classe adm_cmd
herda comando_adm
const txtajuda = "\b\c3Cmd\b\n\
Sintaxe: CMD <comando>\n\
Executa comando na linguagem do IntMUD e mostra o resultado.\n\
O objeto \"este\" é sempre o seu personagem."

func escr
  prog p
  refvar erro = p.classe(este, "func f\n" + arg1)
  se erro != "0" && erro != "1"
    ret arg0.msg("Erro em: " + arg1 + "\n" + txt2(erro))
  senao txtsepara(arg1, "L+DLEOV,DLEOV+L", "\b") != arg1
    cmdlog(arg0, "cmd", arg1)
  fimse
  debug d
  arg0.msg(">" + d.cmd(arg0, "ret (" + arg1 + ")"))


classe adm_cmdj
herda comando_adm
const txtajuda = "\b\c3Cmdj\b\n\
Sintaxe: CMDJ <personagem jogador> <comando>\n\
Executa comando na linguagem do IntMUD e mostra o resultado."

func escr
  refvar nome = txttroca(txt1(arg1), "\"", "")
  se !nome || !txt2(arg1)
    ret arg0.msg("Digite CMDJ seguido do nome do personagem jogador e o comando")
  fimse
  indiceitem item
  item.ini("pn " + txts(txtnome(nome)))
  se !item.obj
    ret arg0.msg("Jogador inexistente ou ausente: " + nome)
  fimse
  prog p
  refvar erro = p.classe(este, "func f\n" + txt2(arg1))
  se erro != "0" && erro != "1"
    ret arg0.msg("Erro em: " + txt2(arg1) + "\n" + txt2(erro))
  senao txtsepara(txt2(arg1), "L+DLEOV,DLEOV+L", "\b") != txt2(arg1)
    cmdlog(arg0, "cmdj", arg1)
  fimse
  debug d
  arg0.msg(txt(item.obj.nome) + ">" + d.cmd(item.obj, "ret " + txt2(arg1)))


classe adm_cmdp
herda comando_adm
const txtajuda = "\b\c3Cmdp\b\n\
Sintaxe: CMDP <personagem da sala> <comando>\n\
Executa comando na linguagem do IntMUD e mostra o resultado."

func escr
  refvar nome = txttroca(txt1(arg1), "\"", "")
  se !nome || !txt2(arg1)
    ret arg0.msg("Digite CMDP seguido do nome do personagem e o comando")
  fimse
  listaobj l
  ref r
  nomeobj n # Para reconhecer os itens
  n.ini(nome, 1000000)
  l.addfim(arg0.dono.dentro2)
  enquanto l
    r = l.objini, l.ini.remove
    continuar !r.visivel(arg0) || !n.nome(r.ident, r.objtot)
    prog p
    refvar erro = p.classe(este, "func f\n" + txt2(arg1))
    se erro != "0" && erro != "1"
      ret arg0.msg("Erro em: " + txt2(arg1) + "\n" + txt2(erro))
    senao txtsepara(txt2(arg1), "L+DLEOV,DLEOV+L", "\b") != txt2(arg1)
      cmdlog(arg0, "cmdp", arg1)
    fimse
    debug d
    ret arg0.msg(txt(r.nome) + ">" + d.cmd(r, "ret " + txt2(arg1)))
  efim
  arg0.msg("Não há nenhum personagem chamado " + nome)


classe adm_cmdi
herda comando_adm
const txtajuda = "\b\c3Cmdi\b\n\
Sintaxe: CMDI <item seu ou da sala> <comando>\n\
Executa comando na linguagem do IntMUD e mostra o resultado."

func escr
  refvar nome = txttroca(txt1(arg1), "\"", "")
  se !nome || !txt2(arg1)
    ret arg0.msg("Digite CMDI seguido do nome do item e o comando")
  fimse
  listaobj l
  ref r
  nomeobj n # Para reconhecer os itens
  n.ini(nome, 1000000)
  l.addfim(arg0.dentro1, arg0.dono.dentro1)
  enquanto l
    r = l.objini, l.ini.remove
    continuar !r.visivel(arg0) || !n.nome(r.ident, r.objtot)
    prog p
    refvar erro = p.classe(este, "func f\n" + txt2(arg1))
    se erro != "0" && erro != "1"
      ret arg0.msg("Erro em: " + txt2(arg1) + "\n" + txt2(erro))
    senao txtsepara(txt2(arg1), "L+DLEOV,DLEOV+L", "\b") != txt2(arg1)
      cmdlog(arg0, "cmdi", arg1)
    fimse
    debug d
    ret arg0.msg(txt(r.nome) + ">" + d.cmd(r, "ret " + txt2(arg1)))
  efim
  arg0.msg("Não há nenhum item chamado " + nome)
