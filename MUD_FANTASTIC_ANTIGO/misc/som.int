classe miscsom
# Para controlar endereços banidos
textovar t1 # Textos do comando som
textovar t2 # Textos que geram os sons
const iniclasse = !$[arg0] && criar(arg0)

func ini # Lê os sons de arquivo
  t1.limpar
  t2.limpar
  debug d
  arqtxt arq
  d.exec = 50000
  epara arq.abrir("sav2/som.txt", 0), !arq.eof, inserir(arq.ler) + d.ini
  efim

func salvar # Salva os sons em arquivo
# Retorna 1 se conseguiu salvar ou 0 se não conseguiu
  arqtxt arq
  ret arq.abrir("sav2/som.txt", 2) == 0, 0
  txt100 lin
  epara lin = t1.ini, lin, lin = t1.depois(lin)
    arq.msg(txtsublin(t1.[lin], 0, 1) + "\n")
  efim
  ret 1

func inserir # Insere um som em arquivo
# arg0 = texto que vem após a palavra SOM, na sintaxe do comando SOM
# Retorna mensagem de erro ou "" se foi inserido com sucesso
  casovar txtmin(txt1(arg0))
  casose "e"
  casose "m"
  casose "i"
    sair intsub(arg0) == 5
    ret "Opção " + txtmai(txt1(arg0)) + " requer 5 argumentos"
  casose
    ret "Opção inexistente: " + arg0
  casofim
# Checa o nome do som
  txt100 checa
  int16 pos
  refvar nome = txtmin(txtremove(txtmin(txtsub(arg0, 1, 1)), "EDC7"))
  checa = vartroca(nome, "", "ch_")
  ret txt(checa, 1), "Caracteres não permitidos no nome do som: " + checa
  ret checa, "Caracter não permitido no nome do som: " + checa
# Checa o nome do arquivo
  refvar arq = txttroca(txtsub(arg0, 2, 1), "\\", "/")
  checa = vartroca(arq, "", "ch_")
  checa = txttroca(checa, "/", "")
  checa = txttroca(checa, ".", "")
  ret txt(checa, 1), "Caracteres não permitidos no nome do arquivo: " + checa
  ret checa, "Caracter não permitido no nome do arquivo: " + checa
  casovar txt(arq, 0, 1)
  casose "/"
    ret "O nome do arquivo não pode começar com /"
  casose "."
    ret "O nome do arquivo não pode começar com ponto"
  casofim
# Checa o volume
  pos = txtsub(arg0, 3, 1)
  se txt(pos) != txtsub(arg0, 3, 1) || pos < 0 || pos > 100
    ret "O volume deve ser um número de 0 a 100"
  fimse
# Checa a quantidade de repetições
  pos = txtsub(arg0, 4, 1)
  se txt(pos) != txtsub(arg0, 4, 1) || pos < -1 || pos > 10 || pos == 0
    pos = -5
  senao pos == -1 && txt1(arg0) == "e"
    pos = -5
  fimse
  se pos == -5
    se txt1(arg0) == "e"
      ret "Número de repetições deve ser um número de 1 a 10"
    senao
      ret "Número de repetições deve ser um número de 1 a 10 ou -1"
    fimse
  fimse
# Adiciona som
  txt512 lin
  se arq != "off"
    se txt1(arg0) == "e"
      lin = "!!SOUND(" + arq
    senao
      lin = "!!MUSIC(off)\n!!MUSIC(" + arq
    fimse
    pos = txtsub(arg0, 3, 1) # Volume
    pos != 100 && (lin += " V=" + pos)
    pos = txtsub(arg0, 4, 1) # Repetições
    pos != 1 && (lin += " L=" + pos)
  senao txt1(arg0) == "e"
    lin = "!!SOUND(off"
  senao
    lin = "!!MUSIC(off"
  fimse
  t1._[nome] = txtmin(txt1(arg0)) + " " + nome + " " + arq + " " + txtsub(arg0, 3)
  t2._[nome] = lin + ")"
  ret ""

const ch_a = ""
const ch_b = ""
const ch_c = ""
const ch_d = ""
const ch_e = ""
const ch_f = ""
const ch_g = ""
const ch_h = ""
const ch_i = ""
const ch_j = ""
const ch_k = ""
const ch_l = ""
const ch_m = ""
const ch_n = ""
const ch_o = ""
const ch_p = ""
const ch_q = ""
const ch_r = ""
const ch_s = ""
const ch_t = ""
const ch_u = ""
const ch_v = ""
const ch_w = ""
const ch_x = ""
const ch_y = ""
const ch_z = ""
const ch_0 = ""
const ch_1 = ""
const ch_2 = ""
const ch_3 = ""
const ch_4 = ""
const ch_5 = ""
const ch_6 = ""
const ch_7 = ""
const ch_8 = ""
const ch_9 = ""
const ch__ = ""
const ch_@ = ""


classe comum_som
const iniclasse = !$[arg0] && criar(arg0)
# Ordem que deve organizar as constantes:
const admordem = "tipo\narquivo\nvolume\nrepete"
const tipo = 0
const volume = 100
const repete = 1
textovar var # Os sons são variáveis "som01", "som10" e "som11"
const ini = atualiza

func texto # Retorna o texto que deve ser enviado ao cliente
# arg0 = volume, de 0 a 100
  txt512 lin
  refvar arq = txttroca(arquivo, " ", "")
  ret !arq || arq == "off" || arg0 <= 0, tipo ? "!!MUSIC(off)" : "!!SOUND(off)"
  se tipo
    lin = "!!MUSIC(off)\n!!MUSIC(" + arq
  senao
    lin = "!!SOUND(" + arq
  fimse
  se arg0 <= 0
    lin += " V=0"
  senao arg0 < 100
    lin += " V=" + arg0
  fimse
  se repete == -1 && tipo
    lin += " L=-1"
  senao int(repete) > 1
    lin += " L=" + repete
  fimse
  ret lin + ")"

func atualiza
  se volume <= 0
    var.som01 = var.som10 = var.som11 = texto(0)
  senao
    var.som01 = texto(int(volume * 0.65 ?? 1))
    var.som10 = texto(int(volume * 0.80 ?? 1))
    var.som11 = texto(volume)
  fimse


classe adm_asom
herda comando_adm
const txtajuda = "\b\c3Asom\b\n\
Sintaxe: ASOM <nomes dos sons>\n\
Apaga uma ou mais sons, com os nomes especificados.\n\
Para apagar um som cujo nome contém espaços no meio, use sublinhado\n\
no lugar dos espaços."

func escr
  prog p
  se arg1 == ""
    ret arg0.msg("Tecle um ou mais nomes de sons após ASOM")
  fimse
  uint16 x
  enquanto txtsub(arg1, x, 1)
    se !p.existe("som_" + txtsub(arg1, x, 1))
      ret arg0.msg("Som não existe: " + txtsub(arg1, x, 1))
    fimse
    x++
  efim
  arg0.sock.tpasso = arg1
  passo(arg0.sock, "")

func passo # Confirmar que quer apagar som
  arg0.passo = ""
  se arg1 == "n"
    arg0.msg("Cancelado")
  senao arg1 == "s"
    prog p
    uint16 x
    enquanto txtsub(arg0.tpasso, x, 1)
      p.apagar("som_" + txtsub(arg0.tpasso, x, 1))
      x++
    efim
    config:salvar
    se x < 2
      arg0.msg("Som apagado: " + arg0.tpasso)
      admlog(arg0, "apagou som " + arg0.tpasso)
    senao
      arg0.msg("Sons apagados: " + arg0.tpasso)
      admlog(arg0, "apagou sons " + arg0.tpasso)
    fimse
  senao
    arg0.passo = este
    refvar m1 = txt2(arg0.tpasso) ? "sons" : "som"
    arg0.msg("Apagar " + m1 + " " + arg0.tpasso + "? Tecle S ou N")
  fimse
  ret 1


classe adm_esom
herda comando_adm
const txtajuda = "\b\c3Esom\b\n\
Sintaxe: ESOM <nome>\n\
Edita o som com o nome especificado."

func escr
  prog p
  se arg1 == ""
    arg0.msg("Tecle o nome do som após ESOM")
  senao !p.existe("som_" + arg1)
    arg0.msg("Som não existe: " + arg1)
  senao
    arg0.sock.var.classe1 = "som_" + txts(txtmin(arg1))
    arg0.sock.var.menufim = "menu_som"
    arg0.sock.m_menu(arg0.sock.var.menufim)
  fimse


classe menu_som
herda comando_menu
const titulo = "Som " + txt(var.classe1, 4)
const colunas = 25
#
const nome1 = "Tipo"
const info1 = "Música contínua não interrompe/reinicia a música se o MUD pedir para\n\
tocar a mesma música de fundo"
const tipo1 = "opc_opcao"
const clas1 = var.classe1
const vari1 = "tipo"
const extr1 = "Efeito sonoro\nMúsica de fundo\nMúsica contínua"
const exec1 = "atualiza"
#
const nome2 = "Arquivo"
const info2 = "Se for a palavra off, cancela a música ou os efeitos sonoros sendo tocados"
const tipo2 = "opc_som_arquivo"
const clas2 = var.classe1
const vari2 = "arquivo"
const exec2 = "atualiza"
#
const nome3 = "Volume"
const info3 = "De 0 a 100, sendo 0 mudo e 100 volume máximo"
const tipo3 = "opc_numero"
const clas3 = var.classe1
const vari3 = "volume"
const extr3 = "0 100"
const exec3 = "atualiza"
#
const nome4 = "Repetições"
const info4 = "Quantas vezes deve repetir, de 1 a 10, ou -1 para tocar indefinidamente\n\
Em efeitos sonoros, -1 faz tocar apenas uma vez"
const tipo4 = "opc_numero"
const clas4 = var.classe1
const vari4 = "repete"
const extr4 = "-1 10"
const exec4 = "atualiza"


classe opc_som_arquivo
herda opc_linha

func passo
  casovar arg1
  casose ""
  casose "\b"
  casose "n"
  casose "v"
  casose "z"
    ret opc_linha:passo(arg0, arg1)
  casofim
  refvar nome = txttroca(arg1, "\\", "/")
  txt200 checa = vartroca(nome, "", "ch_")
  checa = txttroca(checa, "/", "")
  checa = txttroca(checa, ".", "")
  se txt(checa, 1)
    arg0.msg("Caracteres não permitidos no nome do arquivo: " + checa)
  senao checa
    arg0.msg("Caracter não permitido no nome do arquivo: " + checa)
  senao txt(nome, 0, 1) == "/"
    arg0.msg("O nome do arquivo não pode começar com /")
  senao txt(nome, 0, 1) == "."
    arg0.msg("O nome do arquivo não pode começar com ponto")
  senao
    ret opc_linha:passo(arg0, arg1)
  fimse
  arg0.msg("Entre com outro nome, Z cancela")
  ret 1

const ch_a = ""
const ch_b = ""
const ch_c = ""
const ch_d = ""
const ch_e = ""
const ch_f = ""
const ch_g = ""
const ch_h = ""
const ch_i = ""
const ch_j = ""
const ch_k = ""
const ch_l = ""
const ch_m = ""
const ch_n = ""
const ch_o = ""
const ch_p = ""
const ch_q = ""
const ch_r = ""
const ch_s = ""
const ch_t = ""
const ch_u = ""
const ch_v = ""
const ch_w = ""
const ch_x = ""
const ch_y = ""
const ch_z = ""
const ch_0 = ""
const ch_1 = ""
const ch_2 = ""
const ch_3 = ""
const ch_4 = ""
const ch_5 = ""
const ch_6 = ""
const ch_7 = ""
const ch_8 = ""
const ch_9 = ""
const ch__ = ""
const ch_@ = ""


classe adm_csom
herda comando_adm
const txtajuda = "\b\c3Csom\b\n\
Sintaxe: CSOM <nome>\n\
Cria um som com o nome especificado.\n\
O nome deve ser composto de letras, mas pode ter espaços no meio."

func escr
  prog p
# Checa se digitou nome do som
  se arg1 == ""
    ret arg0.msg("Tecle o nome do som após CSOM")
  fimse
# Checa se nome válido
  txt80 nome = txte(txtremove(arg1, "EMDSA"))
  se txtproc(txtsepara(txttroca(nome, " ", ""), "O+DOL,DOL+O"), " ") >= 0
    ret arg0.msg("Nome inválido para som: " + nome)
  senao inttotal(nome) > 40
    ret arg0.msg("Nome deve ter até 40 caracteres: " + nome)
  senao p.existe("som_" + nome)
    ret arg0.msg("Já existe o som: " + nome)
  fimse
# Cria som
  p.criar("som_" + txts(txtmin(nome)) + "\nconfig/som\nherda comum_som")
  criar("admordena", "config/som")
# config:salvar
  arg0.msg("\bCriou som: " + nome)
  admlog(arg0, "criou som " + nome)


classe adm_lsom
herda comando_adm
const txtajuda = "\b\c3Lsom\b\n\
Sintaxe: LSOM [nome]\n\
Lista os sons que começam com o nome especificado.\n\
Se o nome for omitido, lista todos os sons."

func escr
  prog p
  se !p.iniclasse("som_" + arg1)
    arg0.msg("\bNenhum som encontrado.")
  senao
    textotxt t
    t.addfim("\b\c6Som  Tipo  Arquivo\b")
    enquanto p.lin && t.linhas < 500
      refvar lin = ($[p.texto].tipo ? "M  " : "E  ") + $[p.texto].arquivo
      t.addfim(txtcopiamai(txt2(txte(p.texto)), "A") + "  " + lin)
      p.depois
    efim
    arg0.msg2(t.remove(500))
  fimse
