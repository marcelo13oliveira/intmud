classe cmd_trancar
herda comando_comum
const txtajuda = "\b\c3Trancar\b\n\
Sintaxe: TRANCAR <objeto ou direção>\n\
Tranca um objeto ou uma porta.\n\
Nota: pode ser necessário possuir uma chave para trancar."
const posic = 5

func escr
  refvar perm_msg = $perm_[arg0.jogperm].abrir
  ret perm_msg, $mensjog.msg(perm_msg, arg0)
  txt10 dir
  dir = misc:d1[arg1]
  dir ? escrdir(arg0, dir) : escrobj(arg0, arg1)

func escrobj # Trancar um item
# arg0 = personagem
# arg1 = nome do item
  listaitem i # Para procurar o item
  nomeobj n # Para reconhecer os itens
# Procura o item
  ret !arg1, arg0.msg("Trancar o quê?")
  n.ini(arg1, 1)
  epara i = arg0.dono.dentro1.ini, i, i.depois
    sair i.obj.visivel(arg0) && n.nome(i.obj.ident, i.obj.objtot)
  efim
  se !i
    epara i = arg0.dentro1.ini, i, i.depois
      sair i.obj.visivel(arg0) && n.nome(i.obj.ident, i.obj.objtot)
    efim
    $mens.mens = arg1
    ret !i, $mens.mp("Você não vê $m.", arg0)
  fimse
# Checa se está destrancado
  ref r
  r = i.obj
  casovar r.i_aberto
  casose "2"
    ret $mens.mp("$O está abert$u.", arg0, nulo, r)
  casose "4"
    $mens.p(arg0, nulo, r)
    arg0.msginv("$O já está trancad$u.")
    ret 1
  casose
    $mens.p(arg0, nulo, r)
    arg0.msginv("Não é possível trancar $o.")
    ret 1
  casose "3"
  casose "5"
  casofim
  se !r.i_tranc
    $mens.p(arg0, nulo, r)
    arg0.msginv("$O não pode ser trancad$u.")
    ret 1
  fimse
# Procura a chave
  ref chave
  se r.i_fechadura && !arg0.j_imortal
    epara i = arg0.dentro1.ini, i, i.depois
      sair r.i_fechadura == i.obj.i_chave && i.obj.visivel(arg0)
    efim
    ret !i, $mens.mp("Você não possui a chave para trancar $o.", arg0, nulo, r)
    chave = i.obj
  fimse
# Gera eventos
  listaobj l
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret l.objini.cmd_trancarobj(arg0, r, chave, arg0), nulo
  efim
  epara l.addfim(r.evento), l, l.ini.remove
    ret l.objini.cmd_trancarobj(arg0, r, chave, r), nulo
  efim
# Tranca o item
  r.i_aberto = 4
  $mens.p(arg0, r)
  $mens.mtodos1(r.i_msgtrancou ? r.i_msgtrancou : "$P trancou $a.")
  epara l.addfim(arg0.evento), l, l.ini.remove
    l.objini.cmd_trancouobj(arg0, r, chave, arg0)
  efim
  epara l.addfim(r.evento), l, l.ini.remove
    l.objini.cmd_trancouobj(arg0, r, chave, r)
  efim

func escrdir # Trancar uma porta
# arg0 = personagem
# arg1 = nome da direção
# Checa se porta existe
  ret !arg0.dono.dir_[arg1](arg0), arg0.msg("Não há porta nessa direção.")
# Checa se está trancado
  casovar 3 & arg0.dono.porta_[arg1]
  casose
    ret arg0.msg("Não há porta nessa direção.")
  casose "1"
    ret arg0.msg($mens_porta.mens("$P est$o abert$a.", arg0.dono, arg1))
  casose "3"
    ret arg0.msg($mens_porta.mens("$P já est$o trancad$a.", arg0.dono, arg1))
  casose "2"
  casofim
  se !arg0.dono.tranc_[arg1](arg0)
    ret arg0.msg($mens_porta.mens("$P não pode$m ser trancad$a.", arg0.dono, arg1))
  fimse
# Procura a chave
  txt100 mporta # Nome da porta
  txt100 cod # Código da fechadura
  ref chave # Chave que abre a fechadura
  cod = arg0.dono.fechadura_[arg1](arg0), $c_[cod] && (cod = $c_[cod].chave)
  mporta = arg0.dono.portanome_[arg1]
  !mporta && (mporta = $cmd_[arg1].m_porta)
  !mporta && (mporta = "uma porta")
  se cod && !arg0.j_imortal
    listaitem i
    epara i = arg0.dentro1.ini, i, i.depois
      sair cod == i.obj.i_chave && i.obj.visivel(arg0)
    efim
    $mens.mens = mporta
    ret !i, $mens.mp("Você não possui a chave para trancar $m.", arg0)
    chave = i.obj
  fimse
# Gera eventos
  listaobj l
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret l.objini.cmd_trancardir(arg0, arg0.dono, arg1, chave, arg0), nulo
  efim
  epara l.addfim(arg0.dono.evento), l, l.ini.remove
    ret l.objini.cmd_trancardir(arg0, arg0.dono, arg1, chave, arg0.dono), nulo
  efim
# Tranca a porta
  arg0.dono.mudaporta(arg1, 3) # Tranca a porta
  se arg0.dono.socktot
    refvar som = arg0.dono.som_tranc_[arg1]
    $mens.p(arg0)
    $mens.mens = mporta
    epara l.addfim(arg0.dono.dentro2), l, l.ini.remove
      $mens.msgsominv("$P trancou $m.", som, l.objini)
    efim
  fimse
  epara l.addfim(arg0.evento), l, l.ini.remove
    l.objini.cmd_trancoudir(arg0, arg0.dono, arg1, chave, arg0)
  efim
  epara l.addfim(arg0.dono.evento), l, l.ini.remove
    l.objini.cmd_trancoudir(arg0, arg0.dono, arg1, chave, arg0.dono)
  efim


classe cmd_destrancar
herda comando_comum
const txtajuda = "\b\c3Destrancar\b\n\
Sintaxe: DESTRANCAR <objeto ou direção>\n\
Destranca um objeto ou uma porta.\n\
Nota: pode ser necessário possuir uma chave para destrancar."
const posic = 5

func escr
  refvar perm_msg = $perm_[arg0.jogperm].abrir
  ret perm_msg, $mensjog.msg(perm_msg, arg0)
  txt10 dir
  dir = misc:d1[arg1]
  dir ? escrdir(arg0, dir) : escrobj(arg0, arg1)

func escrobj # Destrancar um item
# arg0 = personagem
# arg1 = nome do item
  listaitem i # Para procurar o item
  nomeobj n # Para reconhecer os itens
# Procura o item
  ret !arg1, arg0.msg("Destrancar o quê?")
  n.ini(arg1, 1)
  epara i = arg0.dono.dentro1.ini, i, i.depois
    sair i.obj.visivel(arg0) && n.nome(i.obj.ident, i.obj.objtot)
  efim
  se !i
    epara i = arg0.dentro1.ini, i, i.depois
      sair i.obj.visivel(arg0) && n.nome(i.obj.ident, i.obj.objtot)
    efim
    $mens.mens = arg1
    ret !i, $mens.mp("Você não vê $m.", arg0)
  fimse
# Checa se está trancado
  ref r
  r = i.obj
  casovar r.i_aberto
  casose "2"
    ret $mens.mp("$O está abert$u.", arg0, nulo, r)
  casose "3"
    ret !r.i_tranc, $mens.mp("$O não pode ser trancad$u.", arg0, nulo, r)
    ret $mens.mp("$O não está trancad$u.", arg0, nulo, r)
  casose
    ret $mens.mp("Não foi possível destrancar $o.", arg0, nulo, r)
  casose "4"
  casose "5"
  casofim
# Procura a chave
  ref chave
  se r.i_fechadura && !arg0.j_imortal
    epara i = arg0.dentro1.ini, i, i.depois
      sair r.i_fechadura == i.obj.i_chave && i.obj.visivel(arg0)
    efim
    ret !i, $mens.mp("Você não possui a chave para destrancar $o.", arg0, nulo, r)
    chave = i.obj
  fimse
# Gera eventos
  listaobj l
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret l.objini.cmd_destrancarobj(arg0, r, chave, arg0), nulo
  efim
  epara l.addfim(r.evento), l, l.ini.remove
    ret l.objini.cmd_destrancarobj(arg0, r, chave, r), nulo
  efim
# Destranca o item
  r.i_comechave && chave.apagar(1)
  r.i_aberto = 3
  $mens.p(arg0, r)
  $mens.mtodos1(r.i_msgdestrancou ? r.i_msgdestrancou : "$P destrancou $a.")
  epara l.addfim(arg0.evento), l, l.ini.remove
    l.objini.cmd_destrancouobj(arg0, r, chave, arg0)
  efim
  epara l.addfim(r.evento), l, l.ini.remove
    l.objini.cmd_destrancouobj(arg0, r, chave, r)
  efim

func escrdir # Destrancar uma porta
# arg0 = personagem
# arg1 = nome da direção
# Checa se porta existe
  ret !arg0.dono.dir_[arg1](arg0), arg0.msg("Não há porta nessa direção.")
# Checa se está trancado
  casovar 3 & arg0.dono.porta_[arg1]
  casose
    ret arg0.msg("Não há porta nessa direção.")
  casose "1"
    ret arg0.msg($mens_porta.mens("$P est$o abert$a.", arg0.dono, arg1))
  casose "2"
    se arg0.dono.tranc_[arg1](arg0)
      ret arg0.msg($mens_porta.mens("$P não est$o trancad$a.", arg0.dono, arg1))
    senao
      ret arg0.msg($mens_porta.mens("$P não pode$m ser trancad$a.", arg0.dono, arg1))
    fimse
  casose "3"
  casofim
# Procura a chave
  txt100 mporta # Nome da porta
  txt100 cod # Código da fechadura
  ref chave # Chave que abre a fechadura
  cod = arg0.dono.fechadura_[arg1](arg0), $c_[cod] && (cod = $c_[cod].chave)
  mporta = arg0.dono.portanome_[arg1]
  !mporta && (mporta = $cmd_[arg1].m_porta)
  !mporta && (mporta = "uma porta")
  se cod && !arg0.j_imortal
    listaitem i
    epara i = arg0.dentro1.ini, i, i.depois
      sair cod == i.obj.i_chave && i.obj.visivel(arg0)
    efim
    $mens.mens = mporta
    ret !i, $mens.mp("Você não possui a chave para destrancar $m.", arg0)
    chave = i.obj
    casovar $c_[arg0.dono.fechadura_[arg1](arg0)].infotaxa
    casose "2" # Casa bloqueada por falta de pagamento
      $mens.p(arg0)
      $mens.msginv(config:casamsgbloq, arg0)
      ret
    casose "1" # Atrasou pagamento da taxa
      $mens.p(arg0)
      $mens.msginv(config:casamsgaviso, arg0)
    casofim
  fimse
# Gera eventos
  listaobj l
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret l.objini.cmd_destrancardir(arg0, arg0.dono, arg1, chave, arg0), nulo
  efim
  epara l.addfim(arg0.dono.evento), l, l.ini.remove
    ret l.objini.cmd_destrancardir(arg0, arg0.dono, arg1, chave, arg0.dono), nulo
  efim
# Destranca a porta
  arg0.dono.comechave_[arg1] && chave.apagar(1)
  arg0.dono.mudaporta(arg1, 2) # Destranca a porta
  se arg0.dono.socktot
    refvar som = arg0.dono.som_destr_[arg1]
    $mens.p(arg0)
    $mens.mens = mporta
    epara l.addfim(arg0.dono.dentro2), l, l.ini.remove
      $mens.msgsominv("$P destrancou $m.", som, l.objini)
    efim
  fimse
  epara l.addfim(arg0.evento), l, l.ini.remove
    l.objini.cmd_destrancoudir(arg0, arg0.dono, arg1, chave, arg0)
  efim
  epara l.addfim(arg0.dono.evento), l, l.ini.remove
    l.objini.cmd_destrancoudir(arg0, arg0.dono, arg1, chave, arg0.dono)
  efim
