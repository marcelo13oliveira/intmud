classe cmd_abrir
herda comando_comum
const txtajuda = "\b\c3Abrir\b\n\
Sintaxe: ABRIR <objeto ou direção>\n\
Abre um objeto ou uma porta."
const posic = 5

func escr
  refvar perm_msg = $perm_[arg0.jogperm].abrir
  ret perm_msg, $mensjog.msg(perm_msg, arg0)
  txt10 dir
  dir = misc:d1[arg1]
  dir ? escrdir(arg0, dir) : escrobj(arg0, arg1)

func escrobj # Abrir um item
# arg0 = personagem
# arg1 = nome do item
  listaitem i # Para procurar o item
  nomeobj n # Para reconhecer os itens
# Procura o item
  ret !arg1, arg0.msg("Abrir o quê?")
  n.ini(arg1, 1)
  epara i = arg0.dono.dentro1.ini, i, i.depois
    sair i.obj.visivel(arg0) && n.nome(i.obj.ident, i.obj.objtot)
  efim
  se !i
    epara i = arg0.dentro1.ini, i, i.depois
      sair i.obj.visivel(arg0) && n.nome(i.obj.ident, i.obj.objtot)
    efim
  fimse
  se !i
    epara i = arg0.dentro2.ini, i, i.depois
      sair i.obj.visivel(arg0) && n.nome(i.obj.ident, i.obj.objtot)
    efim
    $mens.mens = arg1
    ret !i, $mens.mp("Você não vê $m.", arg0)
  fimse
# Checa se está aberto
  ref r
  r = i.obj
  casovar r.i_aberto
  casose "2"
    $mens.p(arg0, nulo, r)
    arg0.msginv("$O já está abert$u.")
    ret 1
  casose "4"
    $mens.p(arg0, nulo, r)
    arg0.msginv("$O está trancad$u.")
    ret 1
  casose
    $mens.p(arg0, nulo, r)
    arg0.msginv("Não é possível abrir $o.")
    ret 1
  casose "3"
  casose "5"
  casofim
# Gera eventos
  listaobj l
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret l.objini.cmd_abrirobj(arg0, r, arg0), nulo
  efim
  epara l.addfim(r.evento), l, l.ini.remove
    ret l.objini.cmd_abrirobj(arg0, r, r), nulo
  efim
# Abre o item
  r.i_aberto = 2
  $mens.p(arg0, r)
  $mens.mvis1som(r.i_msgabriu ? r.i_msgabriu : "$P abriu $a.", r.i_som_abre)
  epara l.addfim(arg0.evento), l, l.ini.remove
    l.objini.cmd_abriuobj(arg0, r, arg0)
  efim
  epara l.addfim(r.evento), l, l.ini.remove
    l.objini.cmd_abriuobj(arg0, r, r)
  efim

func escrdir # Abrir uma porta
# arg0 = personagem
# arg1 = nome da direção
# Checa se porta existe
  ret !arg0.dono.dir_[arg1](arg0), arg0.msg("Não há porta nessa direção.")
# Checa se está aberto
  casovar 3 & arg0.dono.porta_[arg1]
  casose
    ret arg0.msg("Não há porta nessa direção.")
  casose "1"
    ret arg0.msg($mens_porta.mens("$P já est$o abert$a.", arg0.dono, arg1))
  casose "3"
    ret arg0.msg($mens_porta.mens("$P est$o trancad$a.", arg0.dono, arg1))
  casose "2"
  casofim
# Gera eventos
  listaobj l
  epara l.addfim(arg0.evento, arg0.dono.evento), l, l.ini.remove
    ret l.objini.cmd_abrirdir(arg0, arg0.dono, arg1), nulo
  efim
# Abre a porta
  $mens.p(arg0)
  arg0.dono.mudaporta(arg1, 1, "$P abriu $m.", "$M se $1.") # Abre a porta
  epara l.addfim(arg0.evento), l, l.ini.remove
    l.objini.cmd_abriudir(arg0, arg0.dono, arg1, arg0)
  efim
  epara l.addfim(arg0.dono.evento), l, l.ini.remove
    l.objini.cmd_abriudir(arg0, arg0.dono, arg1, arg0.dono)
  efim


classe cmd_fechar
herda comando_comum
const txtajuda = "\b\c3Fechar\b\n\
Sintaxe: FECHAR <objeto ou direção>\n\
Fecha um objeto ou uma porta."
const posic = 5

func escr
  refvar perm_msg = $perm_[arg0.jogperm].abrir
  ret perm_msg, $mensjog.msg(perm_msg, arg0)
  txt10 dir
  dir = misc:d1[arg1]
  dir ? escrdir(arg0, dir) : escrobj(arg0, arg1)

func escrobj # Fechar um item
# arg0 = personagem
# arg1 = nome do item
  listaitem i # Para procurar o item
  nomeobj n # Para reconhecer os itens
# Procura o item
  ret !arg1, arg0.msg("Fechar o quê?")
  n.ini(arg1, 1)
  epara i = arg0.dono.dentro1.ini, i, i.depois
    sair i.obj.visivel(arg0) && n.nome(i.obj.ident, i.obj.objtot)
  efim
  se !i
    epara i = arg0.dentro1.ini, i, i.depois
      sair i.obj.visivel(arg0) && n.nome(i.obj.ident, i.obj.objtot)
    efim
  fimse
  se !i
    epara i = arg0.dentro2.ini, i, i.depois
      sair i.obj.visivel(arg0) && n.nome(i.obj.ident, i.obj.objtot)
    efim
    $mens.mens = arg1
    ret !i, $mens.mp("Você não vê $m.", arg0)
  fimse
# Checa se está fechado
  ref r
  r = i.obj
  casovar r.i_aberto
  casose "3"
  casose "4"
    $mens.p(arg0, nulo, r)
    arg0.msginv("$O já está fechad$u.")
    ret 1
  casose
    $mens.p(arg0, nulo, r)
    arg0.msginv("Não é possível fechar $o.")
    ret 1
  casose "2"
  casose "5"
  casofim
# Gera eventos
  listaobj l
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret l.objini.cmd_fecharobj(arg0, r, arg0), nulo
  efim
  epara l.addfim(r.evento), l, l.ini.remove
    ret l.objini.cmd_fecharobj(arg0, r, r), nulo
  efim
# Fecha o item
  r.i_aberto = r.i_tranc == 2 ? 4 : 3
  $mens.p(arg0, r)
  $mens.mvis1som(r.i_msgfechou ? r.i_msgfechou : "$P fechou $a.", r.i_som_fecha)
  epara l.addfim(arg0.evento), l, l.ini.remove
    l.objini.cmd_fechouobj(arg0, r, arg0)
  efim
  epara l.addfim(r.evento), l, l.ini.remove
    l.objini.cmd_fechouobj(arg0, r, r)
  efim

func escrdir # Fechar uma porta
# arg0 = personagem
# arg1 = nome da direção
# Checa se porta existe
  ret !arg0.dono.dir_[arg1](arg0), arg0.msg("Não há porta nessa direção.")
# Checa se está fechado
  casovar 3 & arg0.dono.porta_[arg1]
  casose
    ret arg0.msg("Não há porta nessa direção.")
  casose "2"
  casose "3"
    ret arg0.msg($mens_porta.mens("$P já est$o fechad$a.", arg0.dono, arg1))
  casose "1"
  casofim
# Gera eventos
  listaobj l
  epara l.addfim(arg0.evento), l, l.ini.remove
    ret l.objini.cmd_fechardir(arg0, arg0.dono, arg1, arg0), nulo
  efim
  epara l.addfim(arg0.dono.evento), l, l.ini.remove
    ret l.objini.cmd_fechardir(arg0, arg0.dono, arg1, arg0.dono), nulo
  efim
  ret !arg0.dono.dir_[arg1](arg0), arg0.msg("Não há porta nessa direção.")
# Fecha a porta
  $mens.p(arg0)
  se arg0.dono.tranc_[arg1](arg0) == 2
    arg0.dono.mudaporta(arg1, 3, "$P fechou $m.", "$M se $2.") # Tranca a porta
  senao
    arg0.dono.mudaporta(arg1, 2, "$P fechou $m.", "$M se $2.") # Fecha a porta
  fimse
  epara l.addfim(arg0.evento), l, l.ini.remove
    l.objini.cmd_fechoudir(arg0, arg0.dono, arg1, arg0)
  efim
  epara l.addfim(arg0.dono.evento), l, l.ini.remove
    l.objini.cmd_fechoudir(arg0, arg0.dono, arg1, arg0.dono)
  efim
