classe adm_mudler
herda comando_adm
const txtajuda = "\b\c3Mudler\b\n\
Sintaxe: MUDLER\n\
Recarrega arquivos do MUD que foram alterados.\n\
Nota: Outra forma de recarregar os arquivos é pressionar a tecla F10\n\
na janela do IntMUD."

func escr
  $mudaprog.exec
  ret 1


classe mudaprog
# Recarrega os arquivos que mudaram (checa pela data dos arquivos)
# Para recarregar os arquivos:
# $mudaprog.exec
# As mensagens com o resultado são enviadas para a função msg dessa classe
#
prog p
debug d
textovar arqlista # Data e hora dos arquivos, para detectar quando mudaram
textotxt arqmudou # Sufixo dos arquivos que mudaram
textovar apagarcl # Classes que serão apagadas
textovar mudarcl # Novo conteúdo das classes
textovar ordemcl # Ordem das classes
textovar inicl # Classes que serão inicializadas (função iniclasse)
intexec passofunc # Para mudar classes
uint8 passonum # Número do passo atual
const errlin = 20 # Quantidade máxima de linhas de erros
const iniclasse = !$[arg0] && criar(arg0)

func ini
  acertalista

func acertalista # Acerta variável arqlista
  arqlista.limpar
  arqdir dir
  epara p.iniarq, p.lin, p.depois
    arqlista.x[p.texto] = dir.mtempo(p.arqnome(p.texto))
  efim

func exec # Recarrega arquivos
  arqmudou.limpar
  apagarcl.limpar
  mudarcl.limpar
  ordemcl.limpar
  inicl.limpar
  passonum = 1, passofunc = 1

func msg
  telatxt tela
  tela.msg("(mudler)\n" + arg0 + "\n")
  refvar m1 = inttotal(arg0) > 490 ? txt(arg0, 0, 490) + " (...)" : arg0
  indiceitem item
  epara item.ini("un "), txt1(item.txt) == "un", item.depois
    continuar item.obj.jogperm != "admin" || txt1(item.obj.info) == "l"
    item.obj.msg("(mudler)\n" + m1)
  efim

func passofunc_exec # Próximo passo para alterar programa
  se passo[passonum]
    passofunc = 1, passonum += 1
  fimse

func passo1 # Atualiza lista de arquivos que mudaram
# Acerta variável: textotxt arqmudou
  arqdir dir
  arqprog aprg
# Arquivos apagados
  epara p.iniarq, p.lin, p.depois
    dir.tipo(p.arqnome(p.texto)) != "A" && arqmudou.addfim("*" + p.texto)
  efim
# Arquivos modificados
  aprg.abrir
  arqlista.x != dir.mtempo(aprg.texto + ".int") && arqmudou.addfim("")
  epara aprg.depois, aprg.lin, aprg.depois
    refvar t1 = aprg.texto
    arqlista.x[t1] != dir.mtempo(t1 + ".int") && arqmudou.addfim(t1)
  efim
  ret 1

func passo2 # Adiciona classes dos arquivos que mudaram
# Acerta variável: textovar apagarcl
  textopos p1
  apagarcl.limpar
  epara p1 = arqmudou.ini, p1, p1.depois
    epara p.iniarq(txttroca(p1.texto, "*", "")), p.lin, p.depois
      apagarcl.mudar(p.texto + "\b=1")
    efim
    d.exec = 5000
  efim
  ret 1

func passo3 # Lê arquivos e cria classes novas, porém vazias
# Atualiza variáveis apagarcl, mudarcl e inicl
  textopos p1
  textopos p2
  textotxt t1
  epara p1 = arqmudou.ini, p1, p1.depois
# Lê arquivo
    continuar p1.texto(0, 1) == "*"
    se !t1.ler(p.arqnome(p1.texto), 0)
      msg("Não foi possível abrir arquivo: " + p.arqnome(p1.texto))
      ret 0
    fimse
    t1.addini("") # Adiciona linha em branco no começo do arquivo
# Junta linhas
    d.exec = 100000
    epara p2 = t1.fim, p2.linha, p2.antes
      continuar txtfim(p2.texto, 1) != "\\"
      p2.mudar("", inttotal(p2.texto) - 1, 1)
      p2.depois, p2.juntar, d.exec = 100000
    efim
# Obtém as classes
    txt100 nomedepois # Nome da classe que vem depois
    epara p2 = t1.fim, p2.linha, p2.antes
      continuar txt1(p2.texto) != "classe" || !txt2(p2.texto)
      d.exec = 100000
      txt100 nome
      nome = txt2(p2.texto) # Nome da classe
      apagarcl.mudar(nome + "\b=") # Retira classe da lista
      p2.remove # Para ficar só o conteúdo da classe
      mudarcl.mudar(nome + "\b=" + p1.texto + "\n" + p2.textolin(10000))
# msg("CLASSE: " + nome + "," + p1.texto)
# msg("MUDAR: " + mudarcl.valor(nome))
      p2.remove(10000)
      nomedepois && ordemcl.mudar(nomedepois + "\b=" + nome)
      nomedepois = nome
      continuar p.existe(nome) # Checa se classe já existe
      p.criar(nome + "\n" + p1.texto + "\n") # Cria classe vazia
      inicl.mudar(nome + "\b=1") # Marca como "inicializar"
# msg("CRIAR: " + nome + "\n" + p1.texto)
    efim
  efim
  ret 1

func passo4 # Muda as classes
  txt100 nome
  textotxt erros
# Checa instruções das classes que serão mudadas
  nome = mudarcl.ini
  d.exec = 100000
  enquanto nome
    textotxt t1
    t1.addfim(mudarcl.valor(nome))
    t1.remove
    t1.addfim(p.classe(txtcor(nome), t1.remove(10000)))
    d.ini
# msg("Ao mudar " + txtvis(nome) + ": " + t1.ini.texto)
    casovar t1.ini.texto
    casose "0" # Classe está diferente
      nome = mudarcl.depois(nome)
      sair
    casose "1" # Classe está igual
      txt100 t2
      t2 = mudarcl.depois(nome)
      mudarcl.mudar(nome + "=")
      nome = t2
      sair
    casose # Erro
      erros.addfim("ERRO CLASSE " + txtcor(nome) + ":\n" + t1.remove(1000))
      nome = mudarcl.depois(nome)
    casofim
  efim
# Termina se ocorreu algum erro
  se erros.linhas
    msg(erros.remove(errlin))
    passoerro
    ret 0
  fimse
# Muda as classes
  epara nome = mudarcl.ini, nome, nome = mudarcl.depois(nome)
    refvar result = p.criar(txtcor(nome) + "\n" + mudarcl.valor(nome))
    continuar !result
    erros.addfim("Erro ao alterar classe " + nome)
    msg(mudarcl.valor(nome))
    msg(result)
  efim
# Termina se ocorreu algum erro
  se erros.linhas
    msg(erros.remove(errlin))
    passoerro
    ret 0
  fimse
# Limpa as classes pendentes para apagar
  epara nome = apagarcl.ini, nome, nome = apagarcl.depois(nome)
    p.criar(txtcor(nome) + "\n" + p.arquivo(nome))
  efim
  ret 1

func passo5 # Apaga as classes pendentes e inicializa outras classes
  d.exec = 100000
  textotxt t1
  textotxt t2
  txt100 nome
  epara nome = apagarcl.ini, nome, nome = apagarcl.depois(nome)
    refvar n = txtcor(nome)
    !p.apagar(n) && t1.addfim("Erro ao apagar classe: " + n + "\n")
  efim
# Acerta tempo da última alteração
  acertalista
# Classes criadas
  epara nome = inicl.ini, nome, nome = inicl.depois(nome)
    t2.addfim(txtcor(nome))
  efim
  t2 && t1.addfim("Criado: " + txttroca(t2.remove(1000), "\n", ", "))
# Classes apagadas
  epara nome = apagarcl.ini, nome, nome = apagarcl.depois(nome)
    t2.addfim(txtcor(nome))
  efim
  t2 && t1.addfim("Apagado: " + txttroca(t2.remove(1000), "\n", ", "))
# Classes alteradas
  epara nome = mudarcl.ini, nome, nome = mudarcl.depois(nome)
    t2.addfim(txtcor(nome))
  efim
  t2 && t1.addfim("Mudado: " + txttroca(t2.remove(1000), "\n", ", "))
# Acerta ordem das classes
  epara nome = ordemcl.ini, nome, nome = ordemcl.depois(nome)
   p.cldepois(ordemcl.valor(nome), txtcor(nome))
  efim
# Mensagem na tela
  mudarcl.limpar
  apagarcl.limpar
  ordemcl.limpar
  msg(t1 ? t1.remove(errlin) : "Nada mudou")
  ret 1

func passo6 # Inicializa classes
  txt100 nome
  nome = inicl.ini
  se nome
    inicl.mudar(nome + "=")
    passofunc = 1
    [txtcor(nome)]:iniclasse(txtcor(nome))
  fimse

func passoerro # Ocorreu algum erro
# Apaga classes criadas
  txt100 nome
  epara nome = inicl.ini, nome, nome = inicl.depois(nome)
    p.apagar(txtcor(nome))
  efim
  apagarcl.limpar
  inicl.limpar
  mudarcl.limpar
