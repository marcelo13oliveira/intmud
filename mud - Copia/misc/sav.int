classe miscsav
# Para atualizar hora MUD e salvar personagens e casas de tempos em tempos
inttempo horatempo # Para atualizar a hora e salvar jogos de tempos em tempos
listaobj savlista
inttempo extempo # Salva um jogo / checa se jogo foi excluído
int8 expasso # Usado em extempo_exec
listaobj evhora # Objetos que devem receber eventos cmd_hora
listaobj lhora # Objetos que ainda não receberam eventos cmd_hora
inttempo thora # Para gerar eventos cmd_hora
const iniclasse = !$[arg0] && criar(arg0)

func salvartudo # Salva todos os arquivos pendentes de uma vez
  savlista.limpar
  debug d
  indiceitem item
  epara item.ini("pn "), txt1(item.txt) == "pn", item.depois
    d.ini, item.obj.salvar
  efim
  prog p
  epara p.iniclasse("c_"), p.lin, p.depois
    d.ini, $[p.texto].mudou && $[p.texto].salvar
  efim

func apagousav # Deve ser chamado quando um arquivo de jogador for apagado
# Faz o jogador perder as casas que possui
# arg0 = nome codificado
  indiceitem item
  refvar nome = "cj " + arg0
  enquanto 1
    item.ini(nome)
    ret txtsub(item.txt, 0, 2) != nome, nulo
    item.obj.objmudou = 1
    item.obj.nomejog = ""
  efim

func ini
  debug dbg
  dbg.exec = 1000000
# Cria diretório de jogos salvos, se não existir
  arqdir d
  d.criardir("sav1")
  d.criardir("sav2")
# Limpa arquivos sav antigos
  arqsav sav
  sav.limpar("sav1") # Limpa jogos antigos
  sav.limpar # Faz imediatamente
  sav.limpou # Limpa a lista de arquivos excluídos
# Inicia contagem de tempo hora MUD
# Nota: o tempo MUD é 12 vezes mais rápido que o tempo real
# um dia MUD = 2 horas (7200 segundos), uma hora MUD = 300 segundos
  datahora dh
  dh.agora
  horatempo = 3000 - dh.numseg * 10 % 3000
  misc:imin = horatempo - 1
  misc:hora = intdiv(dh.numseg % 7200 / 300)
  misc:dia = dh.numdias % 7 * 12 + intdiv(dh.numseg / 7200)
  misc:dia = misc:dia % 7
  misc:luz = misc:hora >= 6 && misc:hora < 18

func horatempo_exec # Atualiza hora MUD
# Acerta minuto, hora e luz
  extempo = 2, expasso = 1
  horatempo = 3000 # 60 minutos * 60 segundos * 10 décimos / 12
  misc:imin = 2999
  misc:hora = (misc:hora + 1) % 24
  misc:luz = misc:hora >= 6 && misc:hora < 18
# Acerta dia e limpa jogos antigos
  se misc:hora == 0
    misc:dia = (misc:dia + 1) % 7 # Atualiza o dia
    arqsav sav
    sav.limpar("sav1") # Limpa jogos antigos
  fimse
# Gerar eventos cmd_hora
  lhora.limpar, lhora.addfim(evhora)
  thora = 2
# Obtém lista de objetos (casas e personagens) que devem ser salvos
  se savlista.total == 0
    debug d
    indiceitem item
    epara item.ini("pn "), txt1(item.txt) == "pn", item.depois
      !$perm_[item.obj.jogperm].c_salvar && savlista.addfim(item.obj)
    efim
    prog p
    epara p.iniclasse("c_"), p.lin, p.depois
      d.ini, $[p.texto].mudou && savlista.addfim($[p.texto])
    efim
  fimse
# Envia mensagem da hora para os jogadores
  refvar horamsg = config:horamsg[misc:hora]
  se horamsg
    indiceitem i
    ref r
    epara i.ini("un "), txt1(i.txt) == "un", i.depois
      epara r = i.obj.perso.dono, r.dono, r = r.dono
      efim
      continuar r.s_luz && r.s_luz != 2
      i.obj.perso.msg(horamsg)
    efim
  fimse

func extempo_exec
# Checa se arquivos sav apagados em segundo plano
  se expasso
    textotxt t
    arqsav sav
    t.addfim(sav.limpou)
    expasso = t.remove, extempo = 5
    enquanto t.linhas
      refvar t1 = txt(t.remove)
      apagousav(txt(t1, 4, inttotal(t1) - 8))
    efim
    ret
  fimse
# Salva arquivos pendentes
  se savlista.total
    extempo = 2
    refvar r = ref(savlista.objini)
    savlista.ini.remove
    r.salvar
  fimse

func thora_exec # Gera eventos cmd_hora
  ret !lhora, nulo # Retorna se todos os objetos receberam evento
  debug d
  uint16 t
  thora = 2, t = 20000
  enquanto t && lhora
    refvar r = ref(lhora.objini)
    lhora.ini.remove
    refvar tt = d.exec + 5
    r.cmd_hora(int(misc:hora))
    t -= intpos(tt - d.exec), d.ini
  efim
  !lhora && (thora = 0)
